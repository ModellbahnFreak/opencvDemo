#image: debian:unstable

stages:
    - prepare
    - build
    - test
    - deploy

buildLinux:
    stage: build
    tags:
        - ubuntu-20.04
    needs: []
    script:
        -  ( trap 'echo WorkingAround; sleep 1; echo end' EXIT && cmake . )
        -  ( trap 'echo WorkingAround; sleep 1; echo end' EXIT && cmake --build . )
    artifacts:
        untracked: true
        expire_in: 1 hrs

testLinux:
    stage: test
    tags:
        - ubuntu-20.04
    needs: ["buildLinux"]
    dependencies: 
        - buildLinux
    script:
        - ( trap 'echo WorkingAround; sleep 1; echo end' EXIT && ctest )

checkFormat:
    stage: test
    tags:
        - ubuntu-20.04
    needs: []
    script:
        - ( trap 'echo WorkingAround; sleep 1; echo end' EXIT && clang-format src/* -n -Werror )
        - ( trap 'echo WorkingAround; sleep 1; echo end' EXIT && clang-format include/* -n -Werror )
        - ( trap 'echo WorkingAround; sleep 1; echo end' EXIT && clang-format test/* -n -Werror )

findMemleaksLinux:
    stage: test
    tags:
        - ubuntu-20.04
    dependencies: 
        - buildLinux
    needs: ["buildLinux"]
    script:
        - ( trap 'echo WorkingAround; sleep 1; echo end' EXIT && valgrind --leak-check=yes --error-exitcode=1 --leak-check=full --show-leak-kinds=all --suppressions=/usr/share/opencv4/valgrind.supp --suppressions=/usr/share/opencv4/valgrind_3rdparty.supp ./OpenCVTests )
        - ( trap 'echo WorkingAround; sleep 1; echo end' EXIT && valgrind --leak-check=yes --error-exitcode=1 --leak-check=full --show-leak-kinds=all --suppressions=/usr/share/opencv4/valgrind.supp --suppressions=/usr/share/opencv4/valgrind_3rdparty.supp ./OpenCVDemo noGui )

deployDoc:
    stage: deploy
    tags:
        - ubuntu-20.04
    needs: []
    script:
        - ( trap 'echo WorkingAround; sleep 1; echo end' EXIT && doxygen )
        - ( trap 'echo WorkingAround; sleep 1; echo end' EXIT && cd generated_doc/latex && make )
    artifacts:
        paths:
            - generated_doc/latex/*.pdf
            - generated_doc/html/*
        expire_in: 2 days

buildDepsWindows:
    stage: prepare
    needs: []
    before_script:
        - Get-Command powershell.exe
    script:
        - powershell.exe docker\prepareDeps.ps1
    cache:
        key: dependency-download
        paths:
            - deps/
    artifacts:
        untracked: true
        expire_in: 20 mins

buildWindows:
    stage: build
    tags:
        - windows-10
    dependencies: 
        - buildDepsWindows
    needs: ["buildDepsWindows"]
    script:
        - .\deps\cmake\cmake-3.20.2-windows-x86_64\bin\cmake .
        - .\deps\cmake\cmake-3.20.2-windows-x86_64\bin\cmake --build .
    artifacts:
        untracked: true
        expire_in: 1 hrs

testWindows:
    stage: test
    tags:
        - windows-10
    dependencies: 
        - buildWindows
    needs: ["buildWindows"]
    script:
        - .\deps\cmake\cmake-3.20.2-windows-x86_64\bin\ctest